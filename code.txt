import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Input file path
file_path = r"/content/realdata.xlsx"

# Read the data
df = pd.read_excel(file_path)

# Drop rows with missing values (i.e., repeats that don't have a CT value)
df = df.dropna(subset=["Target CT", "Internal control CT"])

# Calculate Î”CT for each replicate
df["Î”CT"] = df["Target CT"] - df["Internal control CT"]

# Extract the Î”CT value for the control group
control_dct_values = df[df["Treatment"] == "Control"]["Î”CT"]

# Calculate the mean Î”CT for the control group
control_mean_dct = control_dct_values.mean()

# Calculate Î”Î”CT for each replicate
df["Î”Î”CT"] = df["Î”CT"] - control_mean_dct

# Calculate the mean and standard deviation of Î”Î”CT for each treatment
fold_change_data = df.groupby("Treatment").agg(
    mean_Î”Î”CT=("Î”Î”CT", "mean"),  # Mean of Î”Î”CT
    std_Î”Î”CT=("Î”Î”CT", "std")     # Standard deviation of Î”Î”CT
).reset_index()

# Check the standard deviation and replace NaN values with zero
fold_change_data["std_Î”Î”CT"] = fold_change_data["std_Î”Î”CT"].fillna(0)

# Calculate the Fold Change for each replicate
df["Fold Change"] = 2 ** (-df["Î”Î”CT"])

# Apply condition: if Fold Change is less than 1, change its value to -1/Fold Change
df["Fold Change"] = df["Fold Change"].apply(lambda x: -1 / x if x < 1 else x)

# Calculate the mean Fold Change for each treatment
fold_change_data["Fold Change"] = df.groupby("Treatment")["Fold Change"].mean().values

# Output file path for saving results
output_path = file_path.replace(".xlsx", "_foldchange.xlsx")
fold_change_data.to_excel(output_path, index=False)

# File paths for saving the plots
bar_chart_path = file_path.replace(".xlsx", "_bar_chart.png")
scatter_plot_path = file_path.replace(".xlsx", "_scatter_plot.png")

# Set font properties
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams["font.size"] = 14

# Plot the bar chart with negative values shown
plt.figure(figsize=(8, 6))
plt.bar(
    fold_change_data["Treatment"],
    fold_change_data["Fold Change"],
    yerr=fold_change_data["std_Î”Î”CT"],
    capsize=5, color="skyblue", edgecolor="black"
)
plt.xlabel("Treatment", fontsize=14)
plt.ylabel("Fold Change", fontsize=14)
plt.title("Fold Change for Each Treatment (with Error Bars)", fontsize=14)
plt.xticks(rotation=45)
plt.ylim(min(fold_change_data["Fold Change"]) * 1.2, max(fold_change_data["Fold Change"]) * 1.2)  # Adjust Y-axis scale to show negative values
plt.axhline(0, color='black', linewidth=1)  # Add a line at 0 for better differentiation
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.savefig(bar_chart_path, dpi=300, bbox_inches="tight")
plt.close()

# Plot the scatter plot with negative values shown
plt.figure(figsize=(8, 6))
colors = ["red", "blue", "green", "purple", "orange", "brown"]
treatments = fold_change_data["Treatment"].unique()

for i, treatment in enumerate(treatments):
    subset = fold_change_data[fold_change_data["Treatment"] == treatment]
    plt.scatter(
        subset["mean_Î”Î”CT"], subset["Fold Change"],
        color=colors[i], edgecolors="black", s=100, label=treatment
    )

plt.xlabel("mean_Î”Î”CT", fontsize=14)
plt.ylabel("Fold Change", fontsize=14)
plt.title("Scatter Plot of mean_Î”Î”CT vs. Fold Change", fontsize=14)
plt.axhline(0, color='black', linewidth=1)  # Add a line at 0 for better differentiation
plt.grid(True, linestyle="--", alpha=0.7)
plt.legend(title="Treatment")
plt.ylim(min(fold_change_data["Fold Change"]) * 1.2, max(fold_change_data["Fold Change"]) * 1.2)  # Adjust Y-axis scale to show negative values
plt.savefig(scatter_plot_path, dpi=300, bbox_inches="tight")
plt.close()

print(f"âœ… The Fold Change results have been saved in the following file:\n{output_path}")
print(f"ðŸ“Š The Bar Chart (with standard error) has been saved in the following path:\n{bar_chart_path}")
print(f"ðŸ“‰ The Scatter Plot has been saved in the following path:\n{scatter_plot_path}")
